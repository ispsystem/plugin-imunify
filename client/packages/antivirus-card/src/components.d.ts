/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Notifier,
} from './redux/reducers';
import {
  UserNotification,
} from './redux/user-notification.interface';
import {
  Observable,
} from 'rxjs';
import {
  languageTypes,
} from './constants';
import {
  ButtonType,
  ThemePalette,
} from './components/button/button.interface';
import {
  CheckType,
  ScanOption,
} from './models/antivirus/state';
import {
  Validator,
} from './utils/validators';
import {
  ViewType,
} from './components/preloader/preloader';
import {
  SelectedOption,
} from './components/select/select';
import {
  SelectedOption as SelectedOption1,
} from './components/select/select';

export namespace Components {
  interface AntivirusCard {
    /**
    * global notifier object
    */
    'notifier': Notifier;
    /**
    * site ID from vepp
    */
    'siteId': number;
    /**
    * main app translate service
    */
    'translateService': { currentLang: string; defaultLang: string; onLangChange: Observable<{ lang: languageTypes }> };
    /**
    * Global user notification service
    */
    'userNotification': UserNotification;
  }
  interface AntivirusCardButton {
    'btnType': ButtonType;
    'customCSSClass': string;
    'isDisabled': boolean;
    'theme': ThemePalette;
  }
  interface AntivirusCardCheckbox {
    /**
    * Flag fore display type block
    */
    'block': boolean;
    /**
    * Bold highlight active checkbox text
    */
    'bold': boolean;
    /**
    * Value for checkbox
    */
    'checked': boolean;
    /**
    * Make read only available
    */
    'readonly': boolean;
    /**
    * Text wrapping around the checkbox
    */
    'unwrap': boolean;
  }
  interface AntivirusCardCollapse {
    /**
    * Flag for open collapse
    */
    'isOpen': boolean;
    /**
    * Text for input title
    */
    'text': { open: string; close: string };
    /**
    * Method for toggle collapse state
    * @param value - new value
    */
    'toggle': (value?: boolean) => Promise<void>;
  }
  interface AntivirusCardDashboard {}
  interface AntivirusCardDropdown {
    /**
    * Element for attaching dropdown component, by default is root component
    */
    'attachNode': HTMLElement;
    /**
    * Max width for dropdown content
    */
    'maxWidth': string;
    /**
    * Toggle dropdown state
    * @param event - DOM event
    */
    'toggle': (event: Event) => Promise<void>;
  }
  interface AntivirusCardHint {
    /**
    * Flag for display accent icon
    */
    'accent': boolean;
  }
  interface AntivirusCardHistory {}
  interface AntivirusCardInfectedFiles {}
  interface AntivirusCardInput {
    /**
    * Flag for disable input field
    */
    'disabled': boolean;
    /**
    * Flag for display inline
    */
    'inlineBlock': boolean;
    /**
    * Value for input placeholder
    */
    'placeholder': string;
    /**
    * Text prefix
    */
    'textPrefix': string;
    /**
    * Input type in HTML format
    */
    'type': 'text' | 'number';
    /**
    * List of custom validators
    */
    'validator': Validator<string> | Validator<string>[];
    /**
    * Value for input field
    */
    'value': string;
    /**
    * Style width for input field
    */
    'width': string;
  }
  interface AntivirusCardModal {
    /**
    * Modal width
    */
    'modalWidth': string;
    /**
    * Method for change modal visible
    */
    'toggle': (value?: boolean) => Promise<void>;
    /**
    * Flag for visible component
    */
    'visible': boolean;
  }
  interface AntivirusCardNavigation {
    'items': {
      label: string;
      active?: boolean;
    }[];
  }
  interface AntivirusCardNewScan {
    /**
    * Function on modal close
    */
    'closeModal': () => void;
    /**
    * Model settings for new scan
    */
    'preset': ScanOption;
  }
  interface AntivirusCardPreloader {
    /**
    * Value for css style height
    */
    'height': string;
    /**
    * Value for css style left
    */
    'left': string;
    /**
    * Flag for loading
    */
    'loading': boolean;
    /**
    * Spinner size type
    */
    'size': 'large' | 'medium' | 'small';
    /**
    * Value for css style top
    */
    'top': string;
    /**
    * Preloader type
    */
    'type': ViewType;
    /**
    * Value for css style width
    */
    'width': string;
  }
  interface AntivirusCardPreview {
    /**
    * scan type for this card
    */
    'scanType': CheckType;
  }
  interface AntivirusCardScanSettings {
    /**
    * Method for click close modal
    */
    'closeModal': () => void;
    /**
    * Method for set preset in modal
    * @param preset - model of scanOptions
    */
    'setPreset': (preset: ScanOption) => Promise<void>;
  }
  interface AntivirusCardSelect {
    /**
    * Disabled key for select field
    */
    'disabled': boolean;
    /**
    * Placeholder for select field
    */
    'placeholder': string;
    /**
    * Selected value
    */
    'selectedValue': SelectedOption;
    'width': number;
  }
  interface AntivirusCardSelectOption {
    /**
    * Key for active selected value
    */
    'selected': boolean;
    /**
    * Option value
    */
    'value': SelectedOption['v'];
  }
  interface AntivirusCardSpinnerRound {
    /**
    * Position absolute or relative, absolute is default
    */
    'position': string;
    /**
    * Width style for spinner
    */
    'width': string;
  }
  interface AntivirusCardSwitcher {}
  interface AntivirusCardSwitcherOption {
    'active': boolean;
    'disabled': boolean;
    'last': boolean;
    'selectedDisabled': boolean;
  }
  interface AntivirusCardTable {}
  interface AntivirusCardTableCell {
    'alignLeft': boolean;
    'alignRight': boolean;
    'doubleline': boolean;
    'singleline': boolean;
  }
  interface AntivirusCardTablePagination {
    'actionHover': boolean;
    'disabled': boolean;
  }
  interface AntivirusCardTableRow {
    'actionHover': boolean;
    'disabled': boolean;
  }
  interface AntivirusCardVmenu {}
  interface AntivirusCardVmenuItem {}
  interface AntivirusCardZoom {
    /**
    * The number of fields that cannot be deleted
    */
    'notDelCount': number;
    /**
    * Values for initial fields
    */
    'values': string[];
  }
}

declare global {


  interface HTMLAntivirusCardElement extends Components.AntivirusCard, HTMLStencilElement {}
  var HTMLAntivirusCardElement: {
    prototype: HTMLAntivirusCardElement;
    new (): HTMLAntivirusCardElement;
  };

  interface HTMLAntivirusCardButtonElement extends Components.AntivirusCardButton, HTMLStencilElement {}
  var HTMLAntivirusCardButtonElement: {
    prototype: HTMLAntivirusCardButtonElement;
    new (): HTMLAntivirusCardButtonElement;
  };

  interface HTMLAntivirusCardCheckboxElement extends Components.AntivirusCardCheckbox, HTMLStencilElement {}
  var HTMLAntivirusCardCheckboxElement: {
    prototype: HTMLAntivirusCardCheckboxElement;
    new (): HTMLAntivirusCardCheckboxElement;
  };

  interface HTMLAntivirusCardCollapseElement extends Components.AntivirusCardCollapse, HTMLStencilElement {}
  var HTMLAntivirusCardCollapseElement: {
    prototype: HTMLAntivirusCardCollapseElement;
    new (): HTMLAntivirusCardCollapseElement;
  };

  interface HTMLAntivirusCardDashboardElement extends Components.AntivirusCardDashboard, HTMLStencilElement {}
  var HTMLAntivirusCardDashboardElement: {
    prototype: HTMLAntivirusCardDashboardElement;
    new (): HTMLAntivirusCardDashboardElement;
  };

  interface HTMLAntivirusCardDropdownElement extends Components.AntivirusCardDropdown, HTMLStencilElement {}
  var HTMLAntivirusCardDropdownElement: {
    prototype: HTMLAntivirusCardDropdownElement;
    new (): HTMLAntivirusCardDropdownElement;
  };

  interface HTMLAntivirusCardHintElement extends Components.AntivirusCardHint, HTMLStencilElement {}
  var HTMLAntivirusCardHintElement: {
    prototype: HTMLAntivirusCardHintElement;
    new (): HTMLAntivirusCardHintElement;
  };

  interface HTMLAntivirusCardHistoryElement extends Components.AntivirusCardHistory, HTMLStencilElement {}
  var HTMLAntivirusCardHistoryElement: {
    prototype: HTMLAntivirusCardHistoryElement;
    new (): HTMLAntivirusCardHistoryElement;
  };

  interface HTMLAntivirusCardInfectedFilesElement extends Components.AntivirusCardInfectedFiles, HTMLStencilElement {}
  var HTMLAntivirusCardInfectedFilesElement: {
    prototype: HTMLAntivirusCardInfectedFilesElement;
    new (): HTMLAntivirusCardInfectedFilesElement;
  };

  interface HTMLAntivirusCardInputElement extends Components.AntivirusCardInput, HTMLStencilElement {}
  var HTMLAntivirusCardInputElement: {
    prototype: HTMLAntivirusCardInputElement;
    new (): HTMLAntivirusCardInputElement;
  };

  interface HTMLAntivirusCardModalElement extends Components.AntivirusCardModal, HTMLStencilElement {}
  var HTMLAntivirusCardModalElement: {
    prototype: HTMLAntivirusCardModalElement;
    new (): HTMLAntivirusCardModalElement;
  };

  interface HTMLAntivirusCardNavigationElement extends Components.AntivirusCardNavigation, HTMLStencilElement {}
  var HTMLAntivirusCardNavigationElement: {
    prototype: HTMLAntivirusCardNavigationElement;
    new (): HTMLAntivirusCardNavigationElement;
  };

  interface HTMLAntivirusCardNewScanElement extends Components.AntivirusCardNewScan, HTMLStencilElement {}
  var HTMLAntivirusCardNewScanElement: {
    prototype: HTMLAntivirusCardNewScanElement;
    new (): HTMLAntivirusCardNewScanElement;
  };

  interface HTMLAntivirusCardPreloaderElement extends Components.AntivirusCardPreloader, HTMLStencilElement {}
  var HTMLAntivirusCardPreloaderElement: {
    prototype: HTMLAntivirusCardPreloaderElement;
    new (): HTMLAntivirusCardPreloaderElement;
  };

  interface HTMLAntivirusCardPreviewElement extends Components.AntivirusCardPreview, HTMLStencilElement {}
  var HTMLAntivirusCardPreviewElement: {
    prototype: HTMLAntivirusCardPreviewElement;
    new (): HTMLAntivirusCardPreviewElement;
  };

  interface HTMLAntivirusCardScanSettingsElement extends Components.AntivirusCardScanSettings, HTMLStencilElement {}
  var HTMLAntivirusCardScanSettingsElement: {
    prototype: HTMLAntivirusCardScanSettingsElement;
    new (): HTMLAntivirusCardScanSettingsElement;
  };

  interface HTMLAntivirusCardSelectElement extends Components.AntivirusCardSelect, HTMLStencilElement {}
  var HTMLAntivirusCardSelectElement: {
    prototype: HTMLAntivirusCardSelectElement;
    new (): HTMLAntivirusCardSelectElement;
  };

  interface HTMLAntivirusCardSelectOptionElement extends Components.AntivirusCardSelectOption, HTMLStencilElement {}
  var HTMLAntivirusCardSelectOptionElement: {
    prototype: HTMLAntivirusCardSelectOptionElement;
    new (): HTMLAntivirusCardSelectOptionElement;
  };

  interface HTMLAntivirusCardSpinnerRoundElement extends Components.AntivirusCardSpinnerRound, HTMLStencilElement {}
  var HTMLAntivirusCardSpinnerRoundElement: {
    prototype: HTMLAntivirusCardSpinnerRoundElement;
    new (): HTMLAntivirusCardSpinnerRoundElement;
  };

  interface HTMLAntivirusCardSwitcherElement extends Components.AntivirusCardSwitcher, HTMLStencilElement {}
  var HTMLAntivirusCardSwitcherElement: {
    prototype: HTMLAntivirusCardSwitcherElement;
    new (): HTMLAntivirusCardSwitcherElement;
  };

  interface HTMLAntivirusCardSwitcherOptionElement extends Components.AntivirusCardSwitcherOption, HTMLStencilElement {}
  var HTMLAntivirusCardSwitcherOptionElement: {
    prototype: HTMLAntivirusCardSwitcherOptionElement;
    new (): HTMLAntivirusCardSwitcherOptionElement;
  };

  interface HTMLAntivirusCardTableElement extends Components.AntivirusCardTable, HTMLStencilElement {}
  var HTMLAntivirusCardTableElement: {
    prototype: HTMLAntivirusCardTableElement;
    new (): HTMLAntivirusCardTableElement;
  };

  interface HTMLAntivirusCardTableCellElement extends Components.AntivirusCardTableCell, HTMLStencilElement {}
  var HTMLAntivirusCardTableCellElement: {
    prototype: HTMLAntivirusCardTableCellElement;
    new (): HTMLAntivirusCardTableCellElement;
  };

  interface HTMLAntivirusCardTablePaginationElement extends Components.AntivirusCardTablePagination, HTMLStencilElement {}
  var HTMLAntivirusCardTablePaginationElement: {
    prototype: HTMLAntivirusCardTablePaginationElement;
    new (): HTMLAntivirusCardTablePaginationElement;
  };

  interface HTMLAntivirusCardTableRowElement extends Components.AntivirusCardTableRow, HTMLStencilElement {}
  var HTMLAntivirusCardTableRowElement: {
    prototype: HTMLAntivirusCardTableRowElement;
    new (): HTMLAntivirusCardTableRowElement;
  };

  interface HTMLAntivirusCardVmenuElement extends Components.AntivirusCardVmenu, HTMLStencilElement {}
  var HTMLAntivirusCardVmenuElement: {
    prototype: HTMLAntivirusCardVmenuElement;
    new (): HTMLAntivirusCardVmenuElement;
  };

  interface HTMLAntivirusCardVmenuItemElement extends Components.AntivirusCardVmenuItem, HTMLStencilElement {}
  var HTMLAntivirusCardVmenuItemElement: {
    prototype: HTMLAntivirusCardVmenuItemElement;
    new (): HTMLAntivirusCardVmenuItemElement;
  };

  interface HTMLAntivirusCardZoomElement extends Components.AntivirusCardZoom, HTMLStencilElement {}
  var HTMLAntivirusCardZoomElement: {
    prototype: HTMLAntivirusCardZoomElement;
    new (): HTMLAntivirusCardZoomElement;
  };
  interface HTMLElementTagNameMap {
    'antivirus-card': HTMLAntivirusCardElement;
    'antivirus-card-button': HTMLAntivirusCardButtonElement;
    'antivirus-card-checkbox': HTMLAntivirusCardCheckboxElement;
    'antivirus-card-collapse': HTMLAntivirusCardCollapseElement;
    'antivirus-card-dashboard': HTMLAntivirusCardDashboardElement;
    'antivirus-card-dropdown': HTMLAntivirusCardDropdownElement;
    'antivirus-card-hint': HTMLAntivirusCardHintElement;
    'antivirus-card-history': HTMLAntivirusCardHistoryElement;
    'antivirus-card-infected-files': HTMLAntivirusCardInfectedFilesElement;
    'antivirus-card-input': HTMLAntivirusCardInputElement;
    'antivirus-card-modal': HTMLAntivirusCardModalElement;
    'antivirus-card-navigation': HTMLAntivirusCardNavigationElement;
    'antivirus-card-new-scan': HTMLAntivirusCardNewScanElement;
    'antivirus-card-preloader': HTMLAntivirusCardPreloaderElement;
    'antivirus-card-preview': HTMLAntivirusCardPreviewElement;
    'antivirus-card-scan-settings': HTMLAntivirusCardScanSettingsElement;
    'antivirus-card-select': HTMLAntivirusCardSelectElement;
    'antivirus-card-select-option': HTMLAntivirusCardSelectOptionElement;
    'antivirus-card-spinner-round': HTMLAntivirusCardSpinnerRoundElement;
    'antivirus-card-switcher': HTMLAntivirusCardSwitcherElement;
    'antivirus-card-switcher-option': HTMLAntivirusCardSwitcherOptionElement;
    'antivirus-card-table': HTMLAntivirusCardTableElement;
    'antivirus-card-table-cell': HTMLAntivirusCardTableCellElement;
    'antivirus-card-table-pagination': HTMLAntivirusCardTablePaginationElement;
    'antivirus-card-table-row': HTMLAntivirusCardTableRowElement;
    'antivirus-card-vmenu': HTMLAntivirusCardVmenuElement;
    'antivirus-card-vmenu-item': HTMLAntivirusCardVmenuItemElement;
    'antivirus-card-zoom': HTMLAntivirusCardZoomElement;
  }
}

declare namespace LocalJSX {
  interface AntivirusCard extends JSXBase.HTMLAttributes<HTMLAntivirusCardElement> {
    /**
    * global notifier object
    */
    'notifier'?: Notifier;
    /**
    * site ID from vepp
    */
    'siteId'?: number;
    /**
    * main app translate service
    */
    'translateService'?: { currentLang: string; defaultLang: string; onLangChange: Observable<{ lang: languageTypes }> };
    /**
    * Global user notification service
    */
    'userNotification'?: UserNotification;
  }
  interface AntivirusCardButton extends JSXBase.HTMLAttributes<HTMLAntivirusCardButtonElement> {
    'btnType'?: ButtonType;
    'customCSSClass'?: string;
    'isDisabled'?: boolean;
    'theme'?: ThemePalette;
  }
  interface AntivirusCardCheckbox extends JSXBase.HTMLAttributes<HTMLAntivirusCardCheckboxElement> {
    /**
    * Flag fore display type block
    */
    'block'?: boolean;
    /**
    * Bold highlight active checkbox text
    */
    'bold'?: boolean;
    /**
    * Value for checkbox
    */
    'checked'?: boolean;
    /**
    * Event by change checkbox value
    */
    'onChanged'?: (event: CustomEvent<boolean>) => void;
    /**
    * Make read only available
    */
    'readonly'?: boolean;
    /**
    * Text wrapping around the checkbox
    */
    'unwrap'?: boolean;
  }
  interface AntivirusCardCollapse extends JSXBase.HTMLAttributes<HTMLAntivirusCardCollapseElement> {
    /**
    * Flag for open collapse
    */
    'isOpen'?: boolean;
    /**
    * Text for input title
    */
    'text': { open: string; close: string };
  }
  interface AntivirusCardDashboard extends JSXBase.HTMLAttributes<HTMLAntivirusCardDashboardElement> {
    /**
    * open ImunifyAV+ buy modal
    */
    'onOpenBuyModal'?: (event: CustomEvent<ScanOption>) => void;
  }
  interface AntivirusCardDropdown extends JSXBase.HTMLAttributes<HTMLAntivirusCardDropdownElement> {
    /**
    * Element for attaching dropdown component, by default is root component
    */
    'attachNode'?: HTMLElement;
    /**
    * Max width for dropdown content
    */
    'maxWidth'?: string;
  }
  interface AntivirusCardHint extends JSXBase.HTMLAttributes<HTMLAntivirusCardHintElement> {
    /**
    * Flag for display accent icon
    */
    'accent'?: boolean;
  }
  interface AntivirusCardHistory extends JSXBase.HTMLAttributes<HTMLAntivirusCardHistoryElement> {}
  interface AntivirusCardInfectedFiles extends JSXBase.HTMLAttributes<HTMLAntivirusCardInfectedFilesElement> {
    'onOpenBuyModal'?: (event: CustomEvent<any>) => void;
  }
  interface AntivirusCardInput extends JSXBase.HTMLAttributes<HTMLAntivirusCardInputElement> {
    /**
    * Flag for disable input field
    */
    'disabled'?: boolean;
    /**
    * Flag for display inline
    */
    'inlineBlock'?: boolean;
    /**
    * Event for input value changed
    */
    'onChanged'?: (event: CustomEvent<string>) => void;
    /**
    * Value for input placeholder
    */
    'placeholder'?: string;
    /**
    * Text prefix
    */
    'textPrefix'?: string;
    /**
    * Input type in HTML format
    */
    'type'?: 'text' | 'number';
    /**
    * List of custom validators
    */
    'validator'?: Validator<string> | Validator<string>[];
    /**
    * Value for input field
    */
    'value'?: string;
    /**
    * Style width for input field
    */
    'width'?: string;
  }
  interface AntivirusCardModal extends JSXBase.HTMLAttributes<HTMLAntivirusCardModalElement> {
    /**
    * Modal width
    */
    'modalWidth'?: string;
    /**
    * Flag for visible component
    */
    'visible'?: boolean;
  }
  interface AntivirusCardNavigation extends JSXBase.HTMLAttributes<HTMLAntivirusCardNavigationElement> {
    'items'?: {
      label: string;
      active?: boolean;
    }[];
    'onClickItem'?: (event: CustomEvent<any>) => void;
  }
  interface AntivirusCardNewScan extends JSXBase.HTMLAttributes<HTMLAntivirusCardNewScanElement> {
    /**
    * Function on modal close
    */
    'closeModal'?: () => void;
    /**
    * Model settings for new scan
    */
    'preset': ScanOption;
  }
  interface AntivirusCardPreloader extends JSXBase.HTMLAttributes<HTMLAntivirusCardPreloaderElement> {
    /**
    * Value for css style height
    */
    'height'?: string;
    /**
    * Value for css style left
    */
    'left'?: string;
    /**
    * Flag for loading
    */
    'loading'?: boolean;
    /**
    * Spinner size type
    */
    'size'?: 'large' | 'medium' | 'small';
    /**
    * Value for css style top
    */
    'top'?: string;
    /**
    * Preloader type
    */
    'type'?: ViewType;
    /**
    * Value for css style width
    */
    'width'?: string;
  }
  interface AntivirusCardPreview extends JSXBase.HTMLAttributes<HTMLAntivirusCardPreviewElement> {
    /**
    * to change selected tab item (horizontal menu)
    */
    'onClickItem'?: (event: CustomEvent<any>) => void;
    /**
    * to open buy modal
    */
    'onOpenBuyModal'?: (event: CustomEvent<any>) => void;
    /**
    * to open scan settings modal
    */
    'onOpenScanSettingsModal'?: (event: CustomEvent<any>) => void;
    /**
    * scan type for this card
    */
    'scanType'?: CheckType;
  }
  interface AntivirusCardScanSettings extends JSXBase.HTMLAttributes<HTMLAntivirusCardScanSettingsElement> {
    /**
    * Method for click close modal
    */
    'closeModal'?: () => void;
  }
  interface AntivirusCardSelect extends JSXBase.HTMLAttributes<HTMLAntivirusCardSelectElement> {
    /**
    * Disabled key for select field
    */
    'disabled'?: boolean;
    /**
    * Handle for change selected value
    */
    'onChanged'?: (event: CustomEvent<SelectedOption['v']>) => void;
    /**
    * Placeholder for select field
    */
    'placeholder'?: string;
    /**
    * Selected value
    */
    'selectedValue'?: SelectedOption;
    'width'?: number;
  }
  interface AntivirusCardSelectOption extends JSXBase.HTMLAttributes<HTMLAntivirusCardSelectOptionElement> {
    /**
    * Event by change selected status
    */
    'onChangedSelectStatus'?: (event: CustomEvent<SelectedOption>) => void;
    /**
    * Key for active selected value
    */
    'selected'?: boolean;
    /**
    * Option value
    */
    'value'?: SelectedOption['v'];
  }
  interface AntivirusCardSpinnerRound extends JSXBase.HTMLAttributes<HTMLAntivirusCardSpinnerRoundElement> {
    /**
    * Position absolute or relative, absolute is default
    */
    'position'?: string;
    /**
    * Width style for spinner
    */
    'width'?: string;
  }
  interface AntivirusCardSwitcher extends JSXBase.HTMLAttributes<HTMLAntivirusCardSwitcherElement> {}
  interface AntivirusCardSwitcherOption extends JSXBase.HTMLAttributes<HTMLAntivirusCardSwitcherOptionElement> {
    'active'?: boolean;
    'disabled'?: boolean;
    'last'?: boolean;
    'onSelected'?: (event: CustomEvent<any>) => void;
    'selectedDisabled'?: boolean;
  }
  interface AntivirusCardTable extends JSXBase.HTMLAttributes<HTMLAntivirusCardTableElement> {}
  interface AntivirusCardTableCell extends JSXBase.HTMLAttributes<HTMLAntivirusCardTableCellElement> {
    'alignLeft'?: boolean;
    'alignRight'?: boolean;
    'doubleline'?: boolean;
    'singleline'?: boolean;
  }
  interface AntivirusCardTablePagination extends JSXBase.HTMLAttributes<HTMLAntivirusCardTablePaginationElement> {
    'actionHover'?: boolean;
    'disabled'?: boolean;
  }
  interface AntivirusCardTableRow extends JSXBase.HTMLAttributes<HTMLAntivirusCardTableRowElement> {
    'actionHover'?: boolean;
    'disabled'?: boolean;
  }
  interface AntivirusCardVmenu extends JSXBase.HTMLAttributes<HTMLAntivirusCardVmenuElement> {}
  interface AntivirusCardVmenuItem extends JSXBase.HTMLAttributes<HTMLAntivirusCardVmenuItemElement> {}
  interface AntivirusCardZoom extends JSXBase.HTMLAttributes<HTMLAntivirusCardZoomElement> {
    /**
    * The number of fields that cannot be deleted
    */
    'notDelCount'?: number;
    /**
    * Change values event
    */
    'onChanged'?: (event: CustomEvent<string[]>) => void;
    /**
    * Values for initial fields
    */
    'values'?: string[];
  }

  interface IntrinsicElements {
    'antivirus-card': AntivirusCard;
    'antivirus-card-button': AntivirusCardButton;
    'antivirus-card-checkbox': AntivirusCardCheckbox;
    'antivirus-card-collapse': AntivirusCardCollapse;
    'antivirus-card-dashboard': AntivirusCardDashboard;
    'antivirus-card-dropdown': AntivirusCardDropdown;
    'antivirus-card-hint': AntivirusCardHint;
    'antivirus-card-history': AntivirusCardHistory;
    'antivirus-card-infected-files': AntivirusCardInfectedFiles;
    'antivirus-card-input': AntivirusCardInput;
    'antivirus-card-modal': AntivirusCardModal;
    'antivirus-card-navigation': AntivirusCardNavigation;
    'antivirus-card-new-scan': AntivirusCardNewScan;
    'antivirus-card-preloader': AntivirusCardPreloader;
    'antivirus-card-preview': AntivirusCardPreview;
    'antivirus-card-scan-settings': AntivirusCardScanSettings;
    'antivirus-card-select': AntivirusCardSelect;
    'antivirus-card-select-option': AntivirusCardSelectOption;
    'antivirus-card-spinner-round': AntivirusCardSpinnerRound;
    'antivirus-card-switcher': AntivirusCardSwitcher;
    'antivirus-card-switcher-option': AntivirusCardSwitcherOption;
    'antivirus-card-table': AntivirusCardTable;
    'antivirus-card-table-cell': AntivirusCardTableCell;
    'antivirus-card-table-pagination': AntivirusCardTablePagination;
    'antivirus-card-table-row': AntivirusCardTableRow;
    'antivirus-card-vmenu': AntivirusCardVmenu;
    'antivirus-card-vmenu-item': AntivirusCardVmenuItem;
    'antivirus-card-zoom': AntivirusCardZoom;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


